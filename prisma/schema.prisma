generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  ADMIN
  PETUGAS_PENDAFTARAN
  PETUGAS_KEUANGAN
  PETUGAS_INVENTORY
  PETUGAS_TIMBANG
  MEMBER
  USER
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  role   Role   @default(MEMBER)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, role])
  @@map("user_roles")
}
model User {
  id        String    @id @default(cuid()) @db.Char(36)
  name      String?   @unique
  email     String?   @unique
  phone     String?   
  password  String?   @default("password123")
  image     String? 
  roles     UserRole[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  emailVerified DateTime? 
  mudhohi   Mudhohi[]
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CaraBayar {
  TUNAI
  TRANSFER
}

enum PaymentStatus {
  BELUM_BAYAR
  MENUNGGU_KONFIRMASI
  DOWN_PAYMENT
  LUNAS
  BATAL
}

enum HewanStatus {
  TERDAFTAR
  SIAP_SEMBELIH
  DISEMBELIH
  DITIMBANG
  DIINVENTORI
  DIDISTRIBUSI
}

model Pembayaran {
  id               String   @id @default(cuid()) @db.Char(36)
  mudhohiId        String   @unique
  tipeid           Int?      
  quantity         Int?
  isKolektif       Boolean?
  totalAmount      Int?
  cara_bayar       CaraBayar
  paymentStatus    PaymentStatus
  dibayarkan       Int
  urlTandaBukti    String?
  kodeResi         String?   @unique
  createdAt        DateTime  @default(now()) @map("date_created")
  updatedAt        DateTime? @updatedAt
  tipe             TipeHewan? @relation(fields: [tipeid], references: [id])
  mudhohi          Mudhohi  @relation(fields: [mudhohiId], references: [id], onDelete: Cascade)
  @@index([tipeid])
}

model Mudhohi {
  id               String   @id @default(cuid()) @db.Char(36)
  userId           String   @db.Char(36)
  nama_pengqurban  String   @db.VarChar(200) 
  nama_peruntukan  String?   @db.VarChar(200)
  alamat           String?
  phone            String?
  pesan_khusus     String?   @db.VarChar(500)
  keterangan       String?   @db.VarChar(500)
  potong_sendiri   Boolean
  ambil_daging     Boolean?
  dash_code        String
  qrcode_url       String?
  sudah_terima_kupon  Boolean @default(false)
  year             Int       //make default the year now
  createdAt        DateTime  @default(now()) @map("date_created")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment          Pembayaran?
  hewan            HewanQurban[]
  jatahPengqurban  Penerima[]
  // @@unique([nama_pengqurban, year])
  @@index([createdAt, userId, nama_pengqurban]) // From your previous context
}

model HewanQurban {
  id                String       @id @default(cuid())
  tipeId            Int   
  group             String?    
  hewanId           String       @unique // External ID for the animal
  // Animal slaughter progress
  status            HewanStatus  @default(TERDAFTAR)
  slaughtered       Boolean      @default(false)
  slaughteredAt     DateTime?
  meatPackageCount  Int          @default(0)
  onInventory       Boolean      @default(false)
  receivedByMdhohi  Boolean      @default(false)
  isKolektif        Boolean      @default(false)
  isCustom          Boolean      @default(false)
  slotTersisa       Int?          // Jika Kolektif
  keterangan        String?
  // ... relationships
  mudhohi           Mudhohi[]
  tipe              TipeHewan    @relation(fields: [tipeId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  @@index([tipeId, createdAt])
}


enum JenisHewan {
  UNTA
  SAPI
  DOMBA
  KAMBING
}
enum KategoriHewan {
  HEWAN_BESAR
  HEWAN_KECIL
  ALL
}
model TipeHewan {
  id              Int          @id @default(autoincrement())
  nama            String       @unique // Type of animal (e.g., "sapi", "domba")
  icon            String?
  target          Int          @default(0)
  harga           Int          @default(0)
  hargaKolektif   Int?
  note            String?

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  jenis           JenisHewan
  hewan           HewanQurban[]
  pembayaran      Pembayaran[]
}

enum JenisProduk {
  KEPALA
  KARKAS
  JEROAN
  KULIT
  TULANG
  TORPEDO
  BUNTUT
  KAKI
  DAGING
  LAINNYA
}

// Weight tracking
model ProdukHewan {
  id              Int          @id @default(autoincrement())
  nama            String       @unique // daging sapi 5 kg
  berat           Float?
  avgProdPerHewan Int?             @default(1)
  // Product tracking
  targetPaket     Int              @default(0)
  kumulatif       Int              @default(0)
  diTimbang       Int              @default(0)
  diInventori     Int              @default(0)  //arrive at inventory counter
  sdhDiserahkan   Int              @default(0)  //transfered to mustahik
  JenisHewan      JenisHewan
  JenisProduk     JenisProduk
  history         ProductLog[]
  errorLog        ErrorLog[]
  dikirim         ProdukDikirim[]
  tersalurkan     ProdukDiterima[]

}

enum Counter {
  INVENTORY
  TIMBANG
}

enum PengirimanStatus {
  DIKIRIM
  DITERIMA
}
model ProdukDikirim {
  id          String     @id @default(cuid())
  putaranId   Int
  produkId    Int
  jumlah      Int
  produk      ProdukHewan   @relation(fields: [produkId], references: [id], onDelete: Cascade)
  LogPutaranPickup LogPutaranPickup @relation(fields: [putaranId], references: [id])
}

model LogPutaranPickup {
  id                Int          @id @default(autoincrement())
  catatan           String?
  statusPengiriman  PengirimanStatus @default(DIKIRIM)
  daftarProdukHewan ProdukDikirim[] // Menyimpan array objek daftar produk hewan
  waktuPengiriman   DateTime    @default(now())
  waktuDiterima     DateTime?
}
model ProductLog {
  id                Int         @id @default(autoincrement())
  produk            ProdukHewan @relation(fields: [produkId], references: [id], onDelete: Cascade)
  produkId          Int
  event             String      // "menambahkan" or "memindahkan"
  place             Counter
  value             Int
  note              String?
  timestamp         DateTime    @default(now())
}

model ErrorLog {
  id                Int         @id @default(autoincrement())
  produk            ProdukHewan @relation(fields: [produkId], references: [id], onDelete: Cascade)
  produkId          Int
  diTimbang         Int      
  diInventori       Int
  selesai           Boolean     @default(false)
  note              String
  timestamp         DateTime    @default(now())
}

// Distribution tracking
model Distribusi {
  id           String        @id @default(cuid())
  kategori     String        @unique// Contoh: "Pengqurban Sapi", "Panitia", dsb
  target       Int           @default(0)   // Total kupon yang hendak dibagikan
  realisasi    Int           @default(0)   // Jumlah kupon yang telah disalurkan
  createdAt   DateTime      @default(now())
  updatedAt DateTime    @updatedAt
  penerimaList Penerima[]    @relation("DistribusiKePenerima")
}

enum JenisDistribusi {
  KELOMPOK
  INDIVIDU
}

enum StatusKupon {
  AVAILABLE
  DISTRIBUTED
  RETURNED
  NOT_BACK
}
model Kupon {
  id             Int       @id @default(autoincrement())
  status         StatusKupon  @default(AVAILABLE)
  RedoRequest    RedoRequest[]
  createdAt      DateTime   @default(now())
  resetAt        DateTime?  @updatedAt @db.Timestamp()
  returnedAt     DateTime?  @updatedAt @db.Timestamp() 

  @@index([id, status])
}

model Penerima {
  id             String         @id @default(cuid()) @db.Char(36)
  distribusiId   String
  mudhohiId      String?
  diterimaOleh   String?        // Nama penerima aktual
  nama           String?        // Bisa individu atau institusi
  noIdentitas    String?
  jenisId        String?
  alamat         String?
  telepon        String?
  createdAt      DateTime       @default(now()) @map("date_created")
  keterangan     String?        @db.VarChar(500)
  waktuTerima    DateTime?
  sudahMenerima  Boolean        @default(false)
  jumlahKupon    Int?           
  sudah_terima_kupon  Boolean?
  jenis          JenisDistribusi
  distribusi     Distribusi     @relation("DistribusiKePenerima", fields: [distribusiId], references: [id])
  logDistribusi  LogDistribusi?
  mudhohi        Mudhohi? @relation(fields: [mudhohiId], references: [id])

  @@index([jenis, distribusiId,  sudahMenerima])

}
model DistributionEvent {
  id        Int       @id @default(autoincrement())
  isActive  Boolean   @default(false)
  startTime DateTime? @map("startTime") //@db.Timestamp("3")
  endTime   DateTime? @map("endTime") //@db.Timestamp("3")
  createdAt DateTime  @default(now()) @map("createdAt") //@db.Timestamp("3")
  updatedAt DateTime? @updatedAt @map("updatedAt") //@db.Timestamp("3")

  @@map("DistributionEvent") // Explicitly map to the table name
}

model RedoRequest {
  id         Int       @id @default(autoincrement())
  kuponId    Int       @map("penerimaId") 
  code       String
  expiresAt  DateTime  @map("expiresAt") //@db.Timestamp("3")
  isUsed     Boolean   @default(false)
  createdAt  DateTime  @default(now()) @map("createdAt") //@db.Timestamp("3")

  kupon     Kupon  @relation(fields: [kuponId], references: [id], onDelete: Cascade)
  @@index([kuponId])
  @@index([code])
  @@index([expiresAt])
  @@map("RedoRequest") // Explicitly map to the table name

}

//distribusi log mencatat paket apa saja yang diberikan kepada penerima
model ProdukDiterima {
  logDistribusiId   String
  jenisProdukId     Int
  jenisProduk       ProdukHewan @relation(fields: [jenisProdukId], references: [id], onDelete: Cascade)
  jumlahPaket       Int
  LogDistribusi     LogDistribusi @relation(fields: [logDistribusiId], references: [id], onDelete: Cascade)

  @@id([logDistribusiId, jenisProdukId])
}

model LogDistribusi {
  id                String        @id @default(cuid())
  penerimaId        String        @unique
  penerima          Penerima      @relation(fields: [penerimaId], references: [id], onDelete: Cascade)
  listProduk        ProdukDiterima[] // Daftar produk yang diberikan
  createdAt         DateTime      @default(now())
}

// Financial tracking
enum TransactionType {
  PEMASUKAN
  PENGELUARAN
}

model TransactionCategory {
  id            Int       @id @default(autoincrement())
  name          String
  type          TransactionType
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  transactions  Transaction[]
  budgets       Budget[]

  @@map("categories")
}

model Transaction {
  id          String             @id @default(cuid())
  amount      Int
  description String       @db.Text
  categoryId  Int
  type        TransactionType
  category    TransactionCategory    @relation(fields: [categoryId], references: [id])
  date        DateTime
  receiptUrl  Image[]
  createdBy   String             // User ID who created the transaction
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Budget {
  id          String      @id @default(uuid())
  amount      Float
  categoryId  Int
  category    TransactionCategory    @relation(fields: [categoryId], references: [id])
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("budgets")
}

model Image {
  id            String       @id @default(uuid())
  url           String       @unique
  alt           String?
  width         Int?
  height        Int?
  size          Int?
  transactionId String?
  relatedId     String?
  relatedType   String?
  createdAt     DateTime     @default(now())

  @@map("images")
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  @@index([relatedType])
}

model CustomGroup {
  id            String    @id @default(uuid())
  name          String    @unique
  itemCount     Int     @default(10)
  description   String?
  order         Int?
  isActive      Boolean @default(true)
  animalType    KategoriHewan?
  createdAt     DateTime @default(now())
  updatedAt     DateTime?
}
model Setting {
  id          String    @id @default(uuid())
  key         String    @unique
  value       String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("settings")
}

model Address {
  id          String   @id @default(cuid())
  name        String   // Name/label for the address (e.g., "Kantor Pusat", "Gudang")
  street      String   // Street address
  city        String   // City
  province    String   // Province/State
  postalCode  String?  // Postal code
  country     String   @default("Indonesia")
  latitude    Float?   // For map display
  longitude   Float?   // For map display
  phone       String?  // Contact phone
  email       String?  // Contact email
  isActive    Boolean  @default(true)
  isPrimary   Boolean  @default(false) // Mark as primary address
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}